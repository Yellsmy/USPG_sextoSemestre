
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'EQ EQUALS FOR FOR GE GT IDENTIFIER INCREMENT INT INT LBRACE LE LPAREN LT NEQ NUMERIC PRINT PRINT RBRACE RPAREN SEMICOLON STRINGfor_statement : FOR LPAREN for_initial SEMICOLON condition SEMICOLON for_update RPAREN LBRACE body RBRACEfor_initial : INT IDENTIFIER EQUALS NUMERICfor_update : IDENTIFIER INCREMENTcondition :  expression GT expression\n                 | expression LT expression\n                 | expression GE expression\n                 | expression LE expression\n                 | expression EQ expression\n                 | expression NEQ expressionexpression : NUMERIC\n                  | IDENTIFIERbody : PRINT LPAREN STRING RPAREN SEMICOLON\n            | PRINT LPAREN NUMERIC RPAREN SEMICOLON'
    
_lr_action_items = {'FOR':([0,],[2,]),'$end':([1,34,],[0,-1,]),'LPAREN':([2,33,],[3,35,]),'INT':([3,],[5,]),'SEMICOLON':([4,8,10,11,20,23,24,25,26,27,28,38,39,],[6,13,-10,-11,-2,-4,-5,-6,-7,-8,-9,40,41,]),'IDENTIFIER':([5,6,13,14,15,16,17,18,19,],[7,11,22,11,11,11,11,11,11,]),'NUMERIC':([6,12,14,15,16,17,18,19,35,],[10,20,10,10,10,10,10,10,37,]),'EQUALS':([7,],[12,]),'GT':([9,10,11,],[14,-10,-11,]),'LT':([9,10,11,],[15,-10,-11,]),'GE':([9,10,11,],[16,-10,-11,]),'LE':([9,10,11,],[17,-10,-11,]),'EQ':([9,10,11,],[18,-10,-11,]),'NEQ':([9,10,11,],[19,-10,-11,]),'RPAREN':([21,30,36,37,],[29,-3,38,39,]),'INCREMENT':([22,],[30,]),'LBRACE':([29,],[31,]),'PRINT':([31,],[33,]),'RBRACE':([32,40,41,],[34,-12,-13,]),'STRING':([35,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'for_statement':([0,],[1,]),'for_initial':([3,],[4,]),'condition':([6,],[8,]),'expression':([6,14,15,16,17,18,19,],[9,23,24,25,26,27,28,]),'for_update':([13,],[21,]),'body':([31,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> for_statement","S'",1,None,None,None),
  ('for_statement -> FOR LPAREN for_initial SEMICOLON condition SEMICOLON for_update RPAREN LBRACE body RBRACE','for_statement',11,'p_for_statement','p.py',75),
  ('for_initial -> INT IDENTIFIER EQUALS NUMERIC','for_initial',4,'p_for_initial','p.py',79),
  ('for_update -> IDENTIFIER INCREMENT','for_update',2,'p_for_update','p.py',83),
  ('condition -> expression GT expression','condition',3,'p_condition','p.py',87),
  ('condition -> expression LT expression','condition',3,'p_condition','p.py',88),
  ('condition -> expression GE expression','condition',3,'p_condition','p.py',89),
  ('condition -> expression LE expression','condition',3,'p_condition','p.py',90),
  ('condition -> expression EQ expression','condition',3,'p_condition','p.py',91),
  ('condition -> expression NEQ expression','condition',3,'p_condition','p.py',92),
  ('expression -> NUMERIC','expression',1,'p_expression','p.py',95),
  ('expression -> IDENTIFIER','expression',1,'p_expression','p.py',96),
  ('body -> PRINT LPAREN STRING RPAREN SEMICOLON','body',5,'p_body','p.py',101),
  ('body -> PRINT LPAREN NUMERIC RPAREN SEMICOLON','body',5,'p_body','p.py',102),
]
